{"version":3,"sources":["module/blockchain.js","pages/Header.js","images/nft.png","module/api.js","components/SellOrder/SellOrder.js","components/MyNft/MyNft.js","pages/Home.js","pages/Layout.js","redux/reducer.js","App.js","reportWebVitals.js","index.js"],"names":["Blockchain","_account","_provider","web3","fnftContract","ftokenContract","contracts","Contracts","testnet","provider","this","Web3","eth","Contract","FNFT","fnft","setProvider","FToken","ftoken","account","data","quantity","methods","mint","send","from","tx","hash","blockHash","status","console","log","tokenID","tokenURI","call","tokenUri","fetch","res","json","image","useStyles","makeStyles","theme","buttonWrapper","padding","headerButton","margin","withRouter","classes","useStatePersist","userDisconnected","setUserDisconnected","useWallet","connect","reset","ethereum","useState","pending","setPending","blockchain","setBlockchain","useEffect","Grid","container","className","justifyContent","item","Button","variant","color","onClick","then","alert","Api","baseUrl","maker","price","img","tokenId","makerSignature","toBigNum","ids","toString","num","decimals","BigNumber","div","pow","times","cardWrapper","width","height","imageWrapper","textAlign","button","cardImg","SellOrder","nftImg","nftId","order","nprice","orderHandler","API","React","open","setOpen","isPending","setIsPending","swapSdk","setSwapSdk","fillInfo","tokenAddress","amount","type","handleClickOrderBuy","loadApprovalStatus","contractApproved","approveTokenOrNftByAsset","approvalTx","wait","fillSignedOrder","fillTx","awaitTransactionHash","removeOrder","ethers","providers","Web3Provider","signer","getSigner","nftSwapSdk","NftSwapV4","Number","chainId","md","alt","src","Dialog","active","spinner","text","DialogTitle","DialogContent","DialogContentText","DialogActions","MyNft","updatePrice","setPrice","orderInfo","setFillInfo","handleClickSell","handleMakeOrder","_fillInfo","buildOrder","signOrder","singedOrder","makeSellOrder","JSON","stringify","TextField","autoFocus","id","value","onChange","event","target","toFixed","label","fullWidth","rootContainer","myNfts","setMyNfts","sellNfts","setSellNfts","GET_NFTS","gql","_myNfts","myNft","toHuman","findTokenPriceFromOrderArray","orders","length","fetchSellOrders","findSellOrders","_nfts","nft","push","parse","fetchMyNfts","apolloClient","query","variables","toLowerCase","accounts","nfts","mapTokenIDsToImages","tokenIds","getOrders","tid","getTokenUri","map","index","Layout","Fragment","exact","path","component","Home","to","initialState","connected","store","createStore","state","action","App","ThemeProvider","createTheme","palette","background","default","connectors","walletconnect","rpcUrl","rpcInfo","rpc","injected","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ApolloClient","uri","cache","InMemoryCache","ReactDOM","createRoot","document","getElementById","render","StrictMode","ApolloProvider","client"],"mappings":"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","file":"static/js/main.784e3f82.chunk.js","sourcesContent":["import Web3 from 'web3';\nimport FNFT from '../config/abi/FNFT.json';\nimport FToken from '../config/abi/FToken.json';\nimport Contracts from '../config/contracts.json';\n\nclass Blockchain {\n  web3 = null;\n  fnftContract = null;\n  ftokenContract = null;\n  contracts = Contracts.testnet;\n\n  constructor(_account, _provider) {  \n    const provider = _provider;\n    this.web3 = new Web3(provider);\n\n    this.fnftContract = new this.web3.eth.Contract(FNFT, this.contracts.fnft);\n    this.fnftContract.setProvider(provider);\n\n    this.ftokenContract = new this.web3.eth.Contract(FToken, this.contracts.ftoken);\n    this.ftokenContract.setProvider(provider);\n\n    this.account = _account;\n  }\n\n  async mint(data) {\n    try {\n      const { quantity } = data;\n      const tx = await this.fnftContract.methods.mint(quantity).send({\n        from: this.account\n      });\n      return {\n        hash: tx.blockHash,\n        status: tx.status,\n      }\n    } catch (err) {\n      console.log(err);\n      return {\n        status: false\n      }\n    }\n  }\n\n  async getTokenUri(data) {\n    try {\n      const { tokenID } = data;\n      const tokenUri = await this.fnftContract.methods.tokenURI(tokenID).call();\n\n      if (tokenUri) {\n        var res = await fetch(tokenUri);\n        res = await res.json();\n        return {\n          status: true,\n          data: res.image\n        }\n      } else {\n        return {\n          status: false\n        }\n      }\n    } catch (err) {\n      return {\n        status: false\n      }\n    }\n  }\n}\nexport default Blockchain;\n","import React, { useEffect, useState } from 'react';\nimport { useStatePersist } from 'use-state-persist';\nimport '../App.css'\nimport Button from \"@mui/material/Button\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useWallet } from 'use-wallet';\nimport Grid from \"@mui/material//Grid\";\nimport { withRouter } from \"react-router-dom\";\nimport Blockchain from '../module/blockchain';\n\nconst useStyles = makeStyles((theme) => ({\n\tbuttonWrapper: {\n\t\tpadding: 20\n\t},\n\n\theaderButton: {\n\t\tmargin: \"0 20px 0 20px !important\"\n\t}\n}));\n\n\nfunction Header() {\n\tconst classes = useStyles();\n\t/* Will try to connect on load unless true. Default is true. */\n\tconst [userDisconnected, setUserDisconnected] = useStatePersist(true);\n\tconst { account, connect, reset, ethereum } = useWallet();\n\tconst [pending, setPending] = useState(false);\n\tconst [blockchain, setBlockchain] = useState(null);\n\n\tconst mintNFT = () => {\n\t\tlet data = {quantity: 1};\n\t\tif (blockchain && !pending) {\n\t\t\tsetPending(true);\n\t\t\tblockchain.mint(data).then(({hash, status}) => {\n\t\t\t\tsetPending(false);\n\t\t\t\tif (status) {\n\t\t\t\t\talert('minted');\n\t\t\t\t} else {\n\t\t\t\t\talert('mint failed');\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tconst connectOrDisconnect = () => {\n\t\tif (account) {\n\t\t\tsetUserDisconnected(true);\n\t\t\treset();\n\t\t} else {\n\t\t\tsetUserDisconnected(false);\n\t\t\tconnect('injected')\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tif (!account && !userDisconnected) {\n\t\t\tconnect();\n\t\t}\n\t\tif (account && ethereum) {\n\t\t\tconst blockchain = new Blockchain(account, ethereum);\n\t\t\tsetBlockchain(blockchain);\n\t\t}\n\t}, [account, userDisconnected])\n\n\treturn (\n\t\t<Grid container className={classes.buttonWrapper} justifyContent=\"flex-end\">\n\t\t\t<Grid item>\n\t\t\t\t{\n\t\t\t\t\taccount !== null ?\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tclassName={classes.headerButton}\n\t\t\t\t\t\t\tonClick={mintNFT}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tMint NFT\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</> : \"\"\n\t\t\t\t}\n\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tclassName={classes.headerButton}\n\t\t\t\t\t\tonClick={connectOrDisconnect}\n\t\t\t\t>\n\t\t\t\t\t{account === null ? \"Connect\" : \"Disconnect\"}\n\t\t\t\t</Button>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n}\n\nexport default withRouter(Header);\n","export default __webpack_public_path__ + \"static/media/nft.953467dc.png\";","import BigNumber from 'bignumber.js'\n\nclass Api {\n  baseUrl = 'http://127.0.0.1:8000/order';\n  \n  constructor() {\n  }\n\n  async makeSellOrder(data) {\n    const {maker, price, img, tokenId, makerSignature} = data;\n    var res = await fetch(`${this.baseUrl}/makeSellOrder?maker=${maker}&img=${img}&price=${this.toBigNum(price, 18)}&tokenId=${tokenId}&makerSignature=${makerSignature}`);\n    res = await res.json();\n    return res;\n  }\n\n  async findSellOrders(data) {\n    const {account} = data;\n    var res = await fetch(`${this.baseUrl}/findAvailableSellOrders?address=${account}`);\n    res = await res.json();\n    return res;\n  }\n\n  async getOrders(data) {\n    const {ids} = data;\n    var res = await fetch(`${this.baseUrl}/getMySellRequests?ids=${ids.toString()}`);\n    res = await res.json();\n    return res;\n  }\n\n  async removeOrder(data) {\n    const {tokenId} = data;\n    var res = await fetch(`${this.baseUrl}/removeOrder?tokenId=${tokenId.toString()}`);\n    res = await res.json();\n    return res;\n  }\n\n  //---------------------- Common functions ---------------------\n  toHuman(num, decimals) {\n    const humanNum = new BigNumber(num).div(new BigNumber(10).pow(new BigNumber(decimals)));\n    return humanNum;\n  }\n\n  toBigNum(num, decimals) {\n    return new BigNumber(num).times(new BigNumber(10).pow(new BigNumber(decimals)));\n  }\n}\nexport default Api;\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@mui/styles';\nimport Button from '@mui/material/Button';\nimport Grid from \"@mui/material/Grid\";\nimport nft from '../../images/nft.png';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport Api from '../../module/api';\nimport { NftSwapV4 } from '@traderxyz/nft-swap-sdk';\nimport { useWallet } from 'use-wallet';\nimport {ethers} from 'ethers';\nimport Contracts from '../../config/contracts.json';\nimport LoadingOverlay from 'react-loading-overlay';\n\n\nconst useStyles = makeStyles((theme) => ({\n  cardWrapper: {\n    width: 200,\n    height: 200\n  },\n  imageWrapper: {\n    height: 150,\n    textAlign: 'center'\n  },\n  button: {\n    width: 100,\n  },\n  buttonWrapper: {\n    padding: 10,\n    textAlign: 'center'\n  },\n  cardImg: {\n    height: '100%'\n  }\n}));\n\n\nfunction SellOrder({nftImg, nftId, order, nprice, orderHandler}) {\n\tconst classes = useStyles();\n  \n  const API = new Api();\n  const [open, setOpen] = React.useState(false);\n  const [isPending, setIsPending] = useState(false);\n  const [swapSdk, setSwapSdk] = useState(null);\n  const { account, connect, reset, ethereum } = useWallet();\n  const fillInfo = {\n    tokenAddress: Contracts.testnet.ftoken,\n    amount: API.toBigNum(nprice, 18).toString(),\n    type: 'ERC20'\n  };\n\n  const handleClickBuy = () => {\n    setOpen(true);\n  };\n\n  const handleClickOrderBuy = async () => {\n    setIsPending(true);\n    const approvalStatus = await swapSdk.loadApprovalStatus(\n      fillInfo,\n      account\n    );\n\n    if (!approvalStatus.contractApproved) {\n      const approvalTx = await swapSdk.approveTokenOrNftByAsset(\n        fillInfo,\n        account\n      );\n\n      const approvalTxReceipt = await approvalTx.wait();\n    }\n\n    const fillTx = await swapSdk.fillSignedOrder(order);\n    const fillTxReceipt = await swapSdk.awaitTransactionHash(fillTx.hash);\n\n    const res = await API.removeOrder({\n      tokenId: nftId\n    });\n    orderHandler();\n\n    setIsPending(false);\n    alert('order completed!');\n    setOpen(false);\n  }\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    if (account && ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const nftSwapSdk = new NftSwapV4(provider, signer, Number(ethereum.chainId));\n      setSwapSdk(nftSwapSdk);\n    }\n  }, [account, ethereum])\n\n  return (\n    <Grid container className={classes.cardWrapper}>\n      <Grid item md={12} className={classes.imageWrapper} justifyContent=\"center\">\n        <img className={classes.cardImg} alt=\"nft\" src={nftImg} />\n      </Grid>\n      <Grid item md={12} className={classes.buttonWrapper} justifyContent=\"center\">\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          className={classes.button}\n          onClick={handleClickBuy}\n          >\n          BUY\n        </Button>\n      </Grid>\n      <Dialog open={open}>\n        <LoadingOverlay\n          active={isPending}\n          spinner\n          text='Please wait...'\n          >\n          <DialogTitle>Buying NFT</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              The price for this NFT is {nprice}.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClickOrderBuy}>Buy</Button>\n            <Button onClick={handleClose}>Close</Button>\n          </DialogActions>\n        </LoadingOverlay>\n      </Dialog>\n    </Grid>\n  )\n}\n\nexport default SellOrder;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@mui/styles';\nimport Button from '@mui/material/Button';\nimport Grid from \"@mui/material/Grid\";\nimport nft from '../../images/nft.png';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport { useWallet } from 'use-wallet';\nimport { NftSwapV4 } from '@traderxyz/nft-swap-sdk';\nimport Api from '../../module/api';\nimport {ethers} from 'ethers';\nimport Contracts from '../../config/contracts.json';\nimport LoadingOverlay from 'react-loading-overlay';\n\nconst useStyles = makeStyles((theme) => ({\n  cardWrapper: {\n    width: 200,\n    height: 200\n  },\n  imageWrapper: {\n    height: 150,\n    textAlign: 'center'\n  },\n  button: {\n    width: 100,\n  },\n  buttonWrapper: {\n    padding: 10,\n    textAlign: 'center'\n  },\n  cardImg: {\n    height: '100%'\n  }\n}));\n\n\nfunction MyNft({nftImg, nftId, nprice, updatePrice}) {\n  const classes = useStyles();\n  \n  const API = new Api();\n  const { account, connect, reset, ethereum } = useWallet();\n  const [open, setOpen] = React.useState(false);\n  const [price, setPrice] = React.useState(0);\n  const [swapSdk, setSwapSdk] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n  const [orderInfo, setOrderInfo] = useState({\n    tokenAddress: Contracts.testnet.fnft,\n    tokenId: `${nftId}`,\n    type: 'ERC721'\n  });\n\n  \n  const [fillInfo, setFillInfo] = useState({\n    tokenAddress: Contracts.testnet.ftoken,\n    amount: 0,\n    type: 'ERC20'\n  });\n\n  const handleClickSell = async () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handlePrice = (event) => {\n    setPrice(Number(event.target.value).toFixed(0));\n  }\n\n  const handleMakeOrder = async () => {\n    if (price < 0) {\n      alert('Price must be a positive value.');\n      return;\n    } \n    setIsPending(true);\n    const approvalStatus = await swapSdk.loadApprovalStatus(\n      orderInfo,\n      account\n    );\n\n    if (!approvalStatus.contractApproved) {\n      const approvalTx = await swapSdk.approveTokenOrNftByAsset(\n        orderInfo,\n        account\n      );\n\n      const approvalTxReceipt = await approvalTx.wait();\n    }\n\n    let _fillInfo = fillInfo;\n    _fillInfo.amount = API.toBigNum(price, 18).toString();\n    setFillInfo(_fillInfo);\n    const order = swapSdk.buildOrder(\n      orderInfo,\n      _fillInfo,\n      account\n    );\n\n    const singedOrder = await swapSdk.signOrder(order);\n    console.log(singedOrder);\n\n    const res = await API.makeSellOrder({\n      maker: account,\n      price: price,\n      img: nftImg,\n      tokenId: nftId,\n      makerSignature: JSON.stringify(singedOrder)\n    });\n    updatePrice(nftId, price);\n    \n    setIsPending(false);\n    alert('order created!')\n    setOpen(false);\n  }\n\n  useEffect(() => {\n    if (account && ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const nftSwapSdk = new NftSwapV4(provider, signer, Number(ethereum.chainId));\n      setSwapSdk(nftSwapSdk);\n    }\n  }, [account, ethereum])\n\n  return (\n    <Grid container className={classes.cardWrapper}>\n      <Grid item md={12} className={classes.imageWrapper}>\n        <img className={classes.cardImg} alt=\"nft\" src={nftImg} />\n      </Grid>\n      <Grid item md={12} className={classes.buttonWrapper}>\n        {\n          nprice == 0 ?\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              className={classes.button}\n              onClick={handleClickSell}\n              >\n              SELL\n            </Button>\n          :\n            <span>Sell for {nprice}</span>\n        }\n      </Grid>\n      <Dialog open={open}>\n        <LoadingOverlay\n          active={isPending}\n          spinner\n          text='Please wait...'\n          >\n          <DialogTitle>Selling NFT</DialogTitle>\n          <DialogContent>\n              <DialogContentText>\n                Please enter the price you wannt to sell for.\n              </DialogContentText>\n              <TextField\n                autoFocus\n                margin=\"dense\"\n                id=\"name\"\n                value={price}\n                onChange={handlePrice}\n                label=\"Price\"\n                type=\"number\"\n                fullWidth\n                variant=\"standard\"\n              />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleMakeOrder}>Make order</Button>\n            <Button onClick={handleClose}>Close</Button>\n          </DialogActions>\n        </LoadingOverlay>\n      </Dialog>\n    </Grid>\n  )\n}\n\nexport default MyNft;","import React, { useEffect, useState } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { makeStyles } from '@mui/styles';\nimport { useWallet } from \"use-wallet\";\nimport Grid from \"@mui/material/Grid\";\nimport SellOrder from '../components/SellOrder/SellOrder';\nimport MyNft from '../components/MyNft/MyNft';\nimport { gql } from '@apollo/client';\nimport Blockchain from \"../module/blockchain\";\nimport Api from '../module/api';\nimport { apolloClient } from '..';\n\nconst useStyles = makeStyles((theme) => ({\n  rootContainer: {\n    margin: 50\n  }\n}));\n\n\nfunction Home() {\n  const classes = useStyles();\n  const { account, connect, reset, ethereum } = useWallet();\n  const [pending, setPending] = useState(false);\n\tconst [blockchain, setBlockchain] = useState(null);\n  const [myNfts, setMyNfts] = useState([]);\n  const [sellNfts, setSellNfts] = useState([]);\n  const API = new Api();\n\n  const GET_NFTS = gql`\n    query Accounts($account: String!) {\n      accounts(where: {id: $account}) {\n        id\n        nfts {\n          id\n        }\n      }\n    }\n  `;\n\n  const updatePrice = (nftId, price) => {\n    let _myNfts = [...myNfts];\n    for (const myNft of _myNfts) {\n      if (myNft.id === nftId) myNft.price = API.toHuman(API.toBigNum(price, 18), 18).toFixed(0);\n    }\n\n    setMyNfts(_myNfts);\n  }\n\n  const findTokenPriceFromOrderArray = (tokenId, orders) => {\n    if (orders && orders.length > 0){\n      for (const order of orders) {\n        if (tokenId == order.id)\n          return API.toHuman(order.price, 18).toFixed(0);\n      }\n      return 0;\n    } else {\n      return 0;\n    }\n  }\n\n  const fetchSellOrders = async () => {\n    const res = await API.findSellOrders({account});\n    if (res && res.data.length > 0) {\n      let _nfts = [];\n      for (const nft of res.data) {\n        _nfts.push({\n          img: nft.img,\n          id: nft.tokenId,\n          price: API.toHuman(nft.price, 18).toFixed(0),\n          order: JSON.parse(nft.makerSignature)\n        })\n      }\n      setSellNfts(_nfts);\n    }\n  }\n\n  const fetchMyNfts = async () => {\n    const {data} = await apolloClient.query({\n      query: GET_NFTS,\n      variables: {account: account.toLowerCase()}\n    });\n\n    if (data && data.accounts && data.accounts.length > 0) {\n      let ids = [];\n      for (const nft of data.accounts[0].nfts) {\n        ids.push(nft.id);\n      }\n      await mapTokenIDsToImages(ids);\n    }\n  }\n\n  const orderHandler = async () => {\n    fetchMyNfts();\n    fetchSellOrders();\n  }\n\n  const mapTokenIDsToImages = async (tokenIds) => {\n    if (blockchain) {\n      let _nfts = [];\n      const res = await API.getOrders({ids: tokenIds});\n      for (const tid of tokenIds) {\n        const {data, status} = await blockchain.getTokenUri({tokenID: tid});\n        _nfts.push({\n          img: data,\n          id: tid,\n          price: findTokenPriceFromOrderArray(tid, res.data)\n        });\n      }\n      console.log('mynfts: ', _nfts);\n      setMyNfts(_nfts);\n    }\n  }\n\n  useEffect(() => {\n    if (account && ethereum) {\n\t\t\tconst blockchain = new Blockchain(account, ethereum);\n\t\t\tsetBlockchain(blockchain);\n\t\t}\n  }, [account])\n\n  useEffect(() => {\n    if (blockchain) {\n      // fetch my nfts\n      fetchMyNfts();\n      // fetch sell orders\n      fetchSellOrders();\n    }\n  }, [blockchain])\n  \n\n  return (\n    account ? \n    <>\n      <Grid container className={classes.rootContainer}>\n        <Grid item>\n          <h1>Sell Orders</h1>\n        </Grid>\n        <Grid container item>\n          {\n            sellNfts.map((nft, index) => {\n              return (\n                <Grid item><SellOrder nftImg = {nft.img} order = {nft.order} nftId = {nft.id} orderHandler = {orderHandler} nprice = {nft.price}/></Grid>\n              )\n            })\n          }\n        </Grid>\n        <Grid item>\n          <h1>My Nfts</h1>\n        </Grid>\n        <Grid container item>\n          {\n            myNfts.map((nft, index) => {\n              return (\n                <Grid item><MyNft nftImg = {nft.img} nftId = {nft.id} nprice = {nft.price} updatePrice = {updatePrice}/></Grid>\n              )\n            })\n          }\n        </Grid>\n        \n      </Grid>\n    </> : ''\n  )\n}\n\nexport default withRouter(Home);","import React from 'react';\nimport Header from \"./Header\";\nimport Home from \"./Home\";\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRedirect,\n\tRoute\n} from \"react-router-dom\";\n\nfunction Layout() {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Router>\n\t\t\t\t<Header />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/home\" component={Home} />\n\t\t\t\t\t<Route path=\"*\">\n\t\t\t\t\t\t<Redirect to=\"/home\" />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default Layout;\n","const initialState = {\n    connected: false,\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case \"setConnected\":\n            return state;\n        default:\n            return state;\n    }\n}","import './App.css';\nimport Layout from \"./pages/Layout\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { ThemeProvider } from '@mui/styles';\nimport { createTheme } from \"@mui/material/styles\";\nimport { createStore } from \"redux\";\nimport { reducer } from \"./redux\";\nimport { Provider } from 'react-redux';\nimport { UseWalletProvider } from 'use-wallet';\nimport rpcInfo from './config/rpc.json';\n\nconst store = createStore(reducer);\nfunction App() {\n  function getThemeType() {\n    return createTheme({\n        palette: {\n            type: \"light\",\n            background: {\n                default: '#ffffff',\n            },\n        },\n    });\n  }\n\n  return (\n    <Provider store={store} >\n      <ThemeProvider theme={getThemeType()}>\n        <UseWalletProvider\n          connectors={{\n              walletconnect: { rpcUrl: rpcInfo.testnet.rpc },\n              injected: {\n                chainId: [rpcInfo.testnet.chainId]\n              }\n          }}\n        >\n          <CssBaseline />\n          <Layout />\n        </UseWalletProvider>\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client'\nexport const apolloClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/markdev07/frontier-nft-graph',\n  cache: new InMemoryCache()\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <ApolloProvider client={apolloClient}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}